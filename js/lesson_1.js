'use strict';

/** Lesson 1 tasks :
 1. Написать программу, которая запрашивает у пользователя температуру в градусах по Цельсию
 (использовать prompt). Используя alert программа выводит  данную температуру в градусах по Фаренгейту.
 Расчёт по формуле: Tf = (9 / 5) * Tc + 32
 Писать функцию не нужно, пока что максимально простой код.

 2. Объявить две переменные: admin и name. Записать в name строку "Василий". Скопировать значение из
 переменной name в переменную admin и вывести в консоль переменную admin.
 Не использовать сокращённые записи, писать пошаговый ход.

 3. Вывести в консоль значения выражений и объяснить почему получились такие значения используя комментарии
 к каждой строке
 a) 10 + 10 + "10";
 b) 10 + "10" + 10;
 c) 10 + 10 + +"10";
 d) 10 / -"";
 e) 10 / +"2,5";

 4. Самостоятельно разобраться с атрибутами тега script (ASYNC и DEFER) и описать комменатрием
 в чём между ними разница и для чего они.

 5. Пользователь с помощью команды prompt вводит номер билета - 6 цифр. Программа определяет является ли
 счастливым данный билетик и выводит соответствующее сообщение в консоль. Счастливый билетик - это билет,
 у которого сумма правых трёх числе равна сумме трёх левых чисел. Для выполнения задачи необходимо
 использовать оператор % и ветвление. Чтобы сравнить два значения, можно использовать if и else.
 */

// Задание 1:
let tempCels = prompt('Введите значение температуры в градусах по шкале Цельсия');
let tempFaren = 9 / 5 * tempCels + 32;
if (!isNaN(tempFaren)) {
    alert(`${tempCels} по Цельсию это ${tempFaren.toFixed(1)} по Фаренгейту`);
} else {
    alert(`Вы должны ввести целое число (либо дробное с отделением дробной части знаком .`);
}


// Задание 2:
let admin, name = 'Василий';
admin = name;
console.log(admin);

// Задание 3:
console.log(10 + 10 + "10");    // 2010 - операция идёт слева направо, сначала складываются два числа, а при сложении числа и строки происходит конкатенация
console.log(10 + "10" + 10);    // 101010 - конкатенация, потому что числа складываются со строками постоянно
console.log(10 + 10 + +"10");   // 30 - строка "10" приводится сначала к числу (унарный приоритет) и поэтому потом идёт просто сложение трёх цифр
console.log(10 / -"");          // -Infinity -  сначала унарный минус приводит к -0 пустую строку (приоритет), а при делении на -ноль получается сверхмалое значение, то-есть -Infinity
console.log(10 / +"2,5");       // NaN - из-за невозможности привести к числу строку "2,5" (дробное число пишется через точку) операция деления приводит к NaN 

// Задание 4:
//Во-первых оба атрибута, и DEFER и ASYNC могут быть использованы только по отношению к внешнему JS-файлу. 
//Стандартное поведение парсинга (без вышеуказанных атрибутов): сначала читается HTML-разметка, но когда парсинг дойдёт до тэга скрипт, то он будет приостановлен, начнётся получение
//кода сценария и потом его выполнение, и только после его выполнения продолжится парсинг HTML
//ASYNC - атрибут асинхронности означает то, что внешний файл JS-кода будет загружаться одновременно с парсингом HTML, но при этом когда JS будет полностью загружен,
//парсинг HTML опять будет приостановлен, и начнёт выполняться JS и когда он выполнится, парсинг HTML опять продолжится
//DEFER - данный атрибут означает, что как и в случае с ASYNC парсинг HTML будет идти одновременного с получением и разбором JS, но данный сценарный код не будет выполняться
//пока не закончится парсинг и разбор HTML

// Задание 5:
let numberTicket = prompt('Введите номер Вашего билетика строго из шести цифр'),
    message = 'Ваш билет не является счастливым';
if (numberTicket.length === 6 && !isNaN(+numberTicket)) {
    let n1 = numberTicket % 10,
        n2 = Math.floor(numberTicket / 10) % 10,
        n3 = Math.floor(numberTicket / 100) % 10,
        n4 = Math.floor(numberTicket / 1000) % 10,
        n5 = Math.floor(numberTicket / 10000) % 10,
        n6 = Math.floor(numberTicket / 100000) % 10;
    if (n1 + n2 + n3 === n4 + n5 + n6) {
        message = 'Ваш билет счастливый!';
    }
    console.log(message);
} else {
    console.log(`Вы ввели неверные данные`);
}
    