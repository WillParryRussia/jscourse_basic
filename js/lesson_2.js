'use strict';

/*
Задания ко второму уроку по курсу JavaScript, базовый уровень

1. Объясните почему код даёт именно такие результаты:
let a = 1, b = 1, c, d;

c = ++a;
alert(c); // 2

d = b++;
alert(d); // 1

c = 2 + ++a;
alert(c); // 5

d = 2 + b++;
alert(d); // 4

alert(a); // 3
alert(b); // 3

2. Чему будут равны переменные x и a в примере ниже?
Написать почему так произошло (последовательность действий)
let a = 2;
let x = 1 + (a *= 2);

3. Объявить две переменные a и b и задать им целочисленные произвольные начальные значения.
Затем написать скрипт, который работает по следующему принципу:
- если a и b положительные, вывести их разность (ноль считать положительным числом)
- если a и b отрицательные, вывести их произведение
- если a и b разных знаков, вывести их сумму

4. Реализовать основные 4 арифметических операции (+, -, *, /) в виде функций с двумя параметрами.
Обязательно использовать оператор RETURN

5. Реализовать функцию с тремя параметрами: function mathOperation (arg1, arg2, operation), где
arg1, arg2 - значения аргументов, а operation - строка с названием операции. В зависимости от 
переданного значения операции (использовать switch) выполнить одну из арифметических операций (использовать
функции из задания 4) и вернуть полученное значение (RETURN).

6. Программа должна спросить у пользователя количество денег, которое он хочет положить в банк.
Пользователь должен ввести целое число, а программа должна выдать соответствующее сообщение:
"Ваша сумма в 101 рубль успешно зачислена" - в случае если пользователь ввёл 101
"Ваша сумма в 10020 рублей успешно зачислена" - в случае если пользователь ввёл 10200
"Ваша сумма в 120104 рубля успешно зачислена" - в случае если пользователь ввёл 120104
Если пользователь введёт любое другое целое число, программа также должна выдать соответствущее сообщение,
в котором будет отображено это число, а также поставить верное окончание в слове "рубль".
Для получения верного склонения слова (любого слова или числа) вам необходимо создать функцию.

7*
Задание со звёздочкой
С помощью рекурсии организовать функцию возведения числа в степень. Формат: function power(val, pow),
где val — заданное число, pow –— степень.
*/

// Задание 1:
//Объясните почему код даёт именно такие результаты:
let a = 1, b = 1, c, d;

c = ++a;
console.log(c); // 2
d = b++;
console.log(d); // 1
// Разница в том, что префиксный инкремент (++a) сначала увеличивает на единицу, а потом возвращает значение
// А постфиксный оператор (b++) сначала вернёт старое значение, а потом уже увеличивает на единицу

c = 2 + ++a;
console.log(c); // 5
// Здесь тот же самый принцип, как в первых двух примерах. Сначала (++a) увеличится на единицу
// (был 2, вернёт и станет 3) т.о. 2 + 3 = 5

d = 2 + b++;
console.log(d); // 4
// И здесь тот же самый принцип, как в первых двух примерах. Сначала (b++) вернёт старое значение (был и вернёт 2, а
// станет 3) т.о. 2 + 2 = 4, которое будет присвоено переменной d, а сам b увеличится на единицу

console.log(a); // 3
console.log(b); // 3
// Какая бы не была запись (постфикс или префикс) эти переменные все равно получают новые значения всякий раз при
// операциях инкремента/декремента, вне зависимости от того какие значения они возвращают в момент инкремента.

// Задание 2:
// Чему будут равны переменные x и a2 в примере ниже? Написать почему так произошло (последовательность действий)
let a2 = 2;
let x = 1 + (a2 *= 2);
console.log(x);
// В первой строке переменной a2 присваивается значение равное 2
// Во второй строке, исходя из приоритета операторов, а скобки имеют наивысший приоритет, сначала выполняется
// операция умножение значения a2 на 2 (2 * 2 = 4), при этом важно понимать одну вещь: самой переменной a2 тоже
// присваивается новое значение (a2 станет равным 4). Затем выполняется сложение числа 1 с результатом предыдущей
// операции (1 + 4 = 5), и затем результат этих вычислений присваивается переменной x. Т.о. x = 5
// Итог a2 = 4, x = 5

// Задание 3:
//Объявить две переменные a3 и b3 и задать им целочисленные произвольные начальные значения.
//Затем написать скрипт, который работает по следующему принципу:
//  - если a и b положительные, вывести их разность (ноль считать положительным числом)
//  - если a и b отрицательные, вывести их произведение
//  - если a и b разных знаков, вывести их сумму.
//Сделать максимально просто, без излишних функций, задача про ветвления if-elseif-else. Числа вводить с клавиатуры
//не нужно и предусмотреть чтобы их нельзя было изменить

const a3 = 10, b3 = -5;

if (a3 >= 0 && b3 >= 0) {
    console.log(a3 - b3);
} else if (a3 < 0 && b3 < 0) {
    console.log(a3 * b3);
} else {
    console.log(a3 + b3);
}

// Задание 4:
//4. Реализовать основные 4 арифметических операции (+, -, *, /) в виде функций с двумя параметрами.
// Обязательно использовать оператор RETURN
/**
 * Функция складывающая два слагаемых, которые передаются через параметры
 * @param {number} a Первое число (первое слагаемое), которое будет складываться в функции
 * @param {number} b Второе число (второе слагаемое), которое будет складываться в функции
 * @returns {number} Вернёт число, которое получится в результате суммы двух чисел
 */
function addTwoNumbers(a, b) {
    return a + b;
}
/**
 * Функция вычисляющая разность двух чисел, которые передаются через параметры
 * @param {number} a Первое число (уменьшаемое) из которого будет вычитаться второе число (вычитаемого)
 * @param {number} b Второе число (вычитаемое) которое будет вычитаться из первого числа (уменьшаемого)
 * @returns {number} Вернёт число, которое получится в результате вычитания вычитаемого числа из уменьшаемого
 */
function subtractTwoNumbers (a, b) {
    return a - b;
}
/**
 * Функция вычисляющая произведение двух чисел, которые передаются через параметры
 * @param {number} a Первое число (первый множитель), которое будет умножаться на второй множитель
 * @param {number} b Второе число (второй множитель), которое будет умножаться на первый множитель
 * @returns {number} Вернёт число, которое получится в результате произведения двух множителей
 */
function multiplyTwoNumbers (a, b) {
    return a * b;
}
/**
 * функция вычисляющая частное двух чисел, которые передаются через параметры. Дополнительно добавим проверку, что
 * второй аргумент (делитель) не будет равен нулю (чтобы избежать последствий в виде получения Infinity (если
 * делитель будет равен нулю), либо в виде получения NaN (когда и делитель и делимое равны нулю))
 * @param {number} a Первое число (делимое), которое делят
 * @param {number} b Второе число (делитель), на которое делят первое число (делимое)
 * @returns {number} Вернёт число (частное), которое получится в результате деления
 */
function divideTwoNumbers(a, b) {
    if (b === 0) {
        return 0;
    }
    return a / b;
}

// Задание 5:
// Реализовать функцию с тремя параметрами: function mathOperation (arg1, arg2, operation), где
// arg1, arg2 - значения аргументов, а operation - строка с названием операции. В зависимости от
// переданного значения операции (использовать switch) выполнить одну из арифметических операций (использовать
// функции из задания 4) и вернуть полученное значение (RETURN).
// Реализовать тремя способами (function declaration, function expression, arrow function)

/**
 * Функция, которая будет выполнять одну из четырёх базовых арифметических операций с двумя числами,
 * знак арифметической операции выбирается согласно переданному через третий параметр знаку
 * @param {number} arg1 Первое число (первое слагаемое, первый множитель, уменьшаемое или делимое)
 * @param {number} arg2 Второе число (второе слагаемое, второй множитель, вычитаемое или делитель)
 * @param {string} operation Знак арифметической операции для операции с двумя переданными в первых двух параметрах
 * числами (сложение ("+"), вычитание ("-"), произведение ("*"), деление("/"))
 * @returns {number || string} Возвращает итог математической операции над двумя переданными числами, либо возвращает
 * строку, в случае если были введены неверные данные (не числа или неверный арифметический знак)
 */
// Function Declaration
function mathOperation1 (arg1, arg2, operation) {
    switch (operation) {
        case "+":
            return addTwoNumbers(arg1, arg2);
        case "-":
            return subtractTwoNumbers(arg1, arg2);
        case "*":
            return multiplyTwoNumbers(arg1, arg2);
        case "/":
            return divideTwoNumbers(arg1, arg2);
        default:
            return 'Вы ввели неверные данные';
    }
}
// Function Expression
let mathOperation2 = function(arg1, arg2, operation) {
    switch (operation) {
        case "+":
            return addTwoNumbers(arg1, arg2);
        case "-":
            return subtractTwoNumbers(arg1, arg2);
        case "*":
            return multiplyTwoNumbers(arg1, arg2);
        case "/":
            return divideTwoNumbers(arg1, arg2);
        default:
            return 'Вы ввели неверные данные';
    }
};
// Arrow Function
let mathOperation3 = (arg1, arg2, operation) => {
    switch (operation) {
        case "+":
            return addTwoNumbers(arg1, arg2);
        case "-":
            return subtractTwoNumbers(arg1, arg2);
        case "*":
            return multiplyTwoNumbers(arg1, arg2);
        case "/":
            return divideTwoNumbers(arg1, arg2);
        default:
            return 'Вы ввели неверные данные';
    }
};

// Задание 6:
// Программа должна спросить у пользователя количество денег, которое он хочет положить в банк.
// Пользователь должен ввести целое число, а программа должна выдать соответствующее сообщение:
// "Ваша сумма в 101 рубль успешно зачислена" - в случае если пользователь ввёл 101
// "Ваша сумма в 10020 рублей успешно зачислена" - в случае если пользователь ввёл 10200
// "Ваша сумма в 120104 рубля успешно зачислена" - в случае если пользователь ввёл 120104
// Если пользователь введёт любое другое целое число, программа также должна выдать соответствущее сообщение,
// в котором будет отображено это число, а также поставить верное окончание в слове "рубль".
// Для получения верного склонения слова (любого слова или числа) вам необходимо создать функцию.
// Проверки на число (и целое значение) не делать, предположительно набор идёт с предлагаемого цифрового ввода

let moneyAmount = (+prompt('How much money do you want to deposit?'));
let rubleDeclension = chooseEndWord(moneyAmount, "рубль", "рубля", "рублей");
console.log(`Ваша сумма в ${moneyAmount} ${rubleDeclension} успешно зачислена`);

/**
 * Функция, которая склоняет по правилам русского языка слово любое слова в зависимости от количества предметов
 * @param {number} amount Первый параметр, через который передаём количество предметов с которым надо просклонять
 * @param {string} one Второй параметр, в котором передаём верное склонение с количеством предметов равным 1
 * @param {string} two Третий параметр, в котором передаём верное склонение с количеством предметов равным 2
 * @param {string} five Четвёртый параметр, в котором передаём верное склонение с количеством предметов равным 5
 * @return {string} Возвращает искомое слово в правильном склонении
 */
function chooseEndWord(amount, one, two, five) {
    let lastDigits = amount % 100;

    if (lastDigits >= 5 && lastDigits <= 20) {
        return five;
    }

    lastDigits %= 10;
    switch(lastDigits) {
        case 1:
            return one;
        case 2:
        case 3:
        case 4:
            return two;
        default:
            return five;
    }
}
// Тест для другого слова, которое надо просклонять в зависимости от количества
let itemAmount = 112;
let itemDeclension = chooseEndWord(itemAmount, 'предмет', 'предмета', 'предметов');
console.log(`У вас есть ${itemAmount} ${itemDeclension}`);
// Задание 7* :
// С помощью рекурсии организовать функцию возведения числа в степень. Формат: function power(val, pow),
// где val — заданное число, pow –— степень. Расписать пошагово.
/**
 * Функция, которая рекурсивно возводит в число (первый параметр) в нужную степень (второй параметр)
 * @param {number} val Первый параметр, число, которое нужно возвести в определённую степень
 * @param {number} pow Второй параметр, степень, в которую нужно возвести число
 * @return {number} Возвращает число возведённое в степень
 */
function power(val, pow) {
    if (pow === 1) {
        return val;
    }
    return val * power(val, --pow);
}
console.log(power(3,4));

/*
1. Заходим в функцию power, где val = 3, а pow = 4
2. Проверяем pow === 1?
3. Нет.
4. Возвращаем то, что вернёт выражение 3 * power(3, 3)
5. Ищем что вернёт вызов функции power(3, 3), заходим в функцию power(3,3)
6. Проверяем pow === 1?
7. Нет
8. Возвращаем то, что вернёт выражение 3 * power(3, 2). На верхнем уровне теперь будет 3 * 3 * power(3, 2)
9. Ищем что вернёт вызов функции power(3, 2), заходим в функцию power(3,2)
10. Проверяем pow === 1?
11. Нет
12. Возвращаем то, что вернёт выражение 3 * power(3, 1). На верхнем уровне теперь будет 3 * 3 * 3 * power(3, 1)
13. Проверяем pow === 1?
14. Да
15. Значит возвращаем изначальное значение параметра val === 3
16. Возвраты к верхнему уровню стека и теперь там будет 3 * 3 * 3 * 3
17. Возврат числа 81
*/